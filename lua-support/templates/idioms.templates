§ =============================================================
§  Idioms
§ =============================================================

§ -------------------------------------------------------------
§  Resources
§ -------------------------------------------------------------

IncludeFile( 'library_5_1.templates' )
IncludeFile( 'library_5_2.templates' )
§IncludeFile( 'library_5_3.templates' )

§ -------------------------------------------------------------
§  Function Definition
§ -------------------------------------------------------------

== Idioms.function definition == below, map:if, sc:f ==
function |?FUNCTION_NAME| ( <CURSOR>|PARAMETER_LIST| )
	<SPLIT>{-FUNCTION_BODY-}
end  -----  end of function |FUNCTION_NAME|  -----

== Idioms.inline function definition == insert, map:in, sc:n ==
function ( <CURSOR> ) <SPLIT>{-BODY-} return {+RETURN+} end
== ENDTEMPLATE ==

== USE STYLES : Lua_51 ==

== Idioms.metamethod == expandmenu, below, map:im, sc:m ==
|PickList( 'metamethod ', 'idioms_metamethod_5_1' )|
function <CURSOR>|?TABLE_NAME|.__|KEY| ( |VALUE| )
	<SPLIT>{-FUNCTION_BODY-}
end  -----  end of function |TABLE_NAME|.__|KEY|  -----

== ENDTEMPLATE ==

== ENDSTYLES ==

§ use "default" style as well,
§ so this template is used as a fall-back for other styles
== USE STYLES : default, Lua_52 ==

== Idioms.metamethod == expandmenu, below, map:im, sc:m ==
|PickList( 'metamethod ', 'idioms_metamethod_5_2' )|
function <CURSOR>|?TABLE_NAME|.__|KEY| ( |VALUE| )
	<SPLIT>{-FUNCTION_BODY-}
end  -----  end of function |TABLE_NAME|.__|KEY|  -----

== ENDTEMPLATE ==

== ENDSTYLES ==

§== USE STYLES : Lua_53 ==
§
§== Idioms.metamethod == expandmenu, below, map:im, sc:m ==
§|PickList( 'metamethod ', 'idioms_metamethod_5_3' )|
§function <CURSOR>|?TABLE_NAME|.__|KEY| ( |VALUE| )
§	<SPLIT>{-FUNCTION_BODY-}
§end  -----  end of function |TABLE_NAME|.__|KEY|  -----
§
§== ENDTEMPLATE ==
§
§== ENDSTYLES ==

§ -------------------------------------------------------------
§  Error Handling
§ -------------------------------------------------------------

== Idioms.argument error == below, map:iea, sc:e ==
error ( 'bad argument #<CURSOR> to \'|?FUNCTION_NAME|\' ({+MSG+})', 2 )
== Idioms.type error == below, map:iet, sc:e ==
error ( 'bad argument #<CURSOR> to \'|?FUNCTION_NAME|\' ({+TYPE+} expected, got '..type( {+VAR+} )..')', 2 )
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Tables
§ -------------------------------------------------------------

== SEP: Idioms.sep_tables ==

== Idioms.table constructor == below, map:it, sc:t ==
<CURSOR> = {
	<SPLIT>{-INIT-}
}
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Function Calls
§ -------------------------------------------------------------

== SEP: Idioms.sep_std_lib ==

== USE STYLES : Lua_51 ==

== Idioms.library functions == insert, map:il, sc:l ==
|PickList( 'lua function', 'idioms_func_5_1' )|
<CURSOR>|KEY| ( |VALUE| )
== Idioms.library variables == expandmenu, insert, map:iv, sc:v ==
|PickList( 'lua variable', 'idioms_var_5_1' )|
|PICK|<CURSOR>
== ENDTEMPLATE ==

== ENDSTYLES ==

§ use "default" style as well,
§ so this template is used as a fall-back for other styles
== USE STYLES : default, Lua_52 ==

== Idioms.library functions == insert, map:il, sc:l ==
|PickList( 'lua function', 'idioms_func_5_2' )|
<CURSOR>|KEY| ( |VALUE| )
== Idioms.library variables == expandmenu, insert, map:iv, sc:v ==
|PickList( 'lua variable', 'idioms_var_5_2' )|
|PICK|<CURSOR>
== ENDTEMPLATE ==

== ENDSTYLES ==

§== USE STYLES : Lua_53 ==
§
§== Idioms.library functions == insert, map:il, sc:l ==
§|PickList( 'lua function', 'idioms_func_5_3' )|
§<CURSOR>|KEY| ( |VALUE| )
§== Idioms.library variables == expandmenu, insert, map:iv, sc:v ==
§|PickList( 'lua variable', 'idioms_var_5_3' )|
§|PICK|<CURSOR>
§== ENDTEMPLATE ==
§
§== ENDSTYLES ==

§ -------------------------------------------------------------
§  Iterators
§ -------------------------------------------------------------

== LIST: idioms_iterators == hash ==
	'ipairs'        : 'idx, val in ipairs ( {+TABLE+} )',
	'pairs'         : 'key, val in pairs ( {+TABLE+} )',
	'file:lines'    : 'line in {+FILE+}:lines()',
	'io.lines'      : 'line in io.lines ( {+FILENAME+} )',
	'string.gmatch' : ' in string.gmatch ( {+STRING+}, {+PATTERN+} )',
	'range'         : 'idx = {+FIRST+}, {+LAST+}',
	'range+step'    : 'idx = {+FIRST+}, {+LAST+}, {+STEP+}',
== ENDLIST ==

== Idioms.iterators == expandmenu, map:ii, sc:i ==
|PickList( 'iterate over', 'idioms_iterators' )|
for <CURSOR>|PICK| do
	<SPLIT>{-LOOP_BODY-}
end
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Files
§ -------------------------------------------------------------

== SEP: Idioms.sep_file ==

== Idioms.open file == below, map:iof, sc:o ==
local |?FILE_HANDLE| = assert ( io.open ( <CURSOR>, '{+MODE+}' ) )

assert ( io.close ( |FILE_HANDLE| ) )
== Idioms.open tmp-file == below, map:iot ==
local |?TMPFILE_NAME| = assert ( os.tmpname (), 'could not open a temporary file' )
local |?FILE_HANDLE| = assert ( io.open ( <CURSOR>|TMPFILE_NAME|, '{+MODE+}' ) )

assert ( io.close ( |FILE_HANDLE| ) )

assert ( os.remove ( |TMPFILE_NAME| ) )
== Idioms.open pipe == below, map:iop ==
local |?FILE_HANDLE| = assert ( io.popen ( <CURSOR>, '{+MODE+}' ) )

assert ( io.close ( |FILE_HANDLE| ) )
== ENDTEMPLATE ==

§ -------------------------------------------------------------
§  Path
§ -------------------------------------------------------------

== SEP: Idioms.sep_path ==

== Idioms.add to path == below, map:ip, sc:p ==
package.path = package.path .. ';<CURSOR>/?.lua'
== Idioms.add to path, local modules == below, sc:p ==
package.path = '<CURSOR>|LUA_LOCAL_MODULES|/?.lua;' .. package.path
== ENDTEMPLATE ==

